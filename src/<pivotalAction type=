import { createWorker } from 'tesseract.js'
import { PDFDocument } from 'pdf-lib'
import { Tweet, TweetLength, TweetTone } from '../types'

interface GenerateTweetsParams {
  topic: string
  tone: TweetTone
  length: TweetLength
  threadMode: boolean
  threadCount: number
  file: File | null
}

export async function generateTweets(params: GenerateTweetsParams): Promise<Tweet[]> {
  const { topic, tone, length, threadMode, threadCount, file } = params
  
  // Extract content from file if provided
  let fileContent = ''
  if (file) {
    fileContent = await extractContentFromFile(file)
  }
  
  // Prepare the prompt for OpenAI
  const prompt = createPrompt(topic, fileContent, tone, length, threadMode, threadCount)
  
  // Call OpenAI API through proxy
  const tweets = await callOpenAIAPI(prompt)
  
  return tweets
}

async function extractContentFromFile(file: File): Promise<string> {
  const fileType = file.type
  
  if (fileType === 'application/pdf') {
    return extractTextFromPDF(file)
  } else if (fileType.startsWith('text/')) {
    return extractTextFromTextFile(file)
  } else if (fileType.startsWith('image/')) {
    return extractTextFromImage(file)
  }
  
  return ''
}

async function extractTextFromPDF(file: File): Promise<string> {
  try {
    const arrayBuffer = await file.arrayBuffer()
    const pdfDoc = await PDFDocument.load(arrayBuffer)
    
    // This is a simplified approach - pdf-lib doesn't directly extract text
    // In a production app, you'd use a more robust PDF text extraction library
    const pageCount = pdfDoc.getPageCount()
    return `PDF document with ${pageCount} pages. Please generate tweets based on this PDF.`
  } catch (error) {
    console.error('Error extracting text from PDF:', error)
    return 'Error extracting text from PDF'
  }
}

async function extractTextFromTextFile(file: File): Promise<string> {
  try {
    return await file.text()
  } catch (error) {
    console.error('Error extracting text from text file:', error)
    return 'Error extracting text from text file'
  }
}

async function extractTextFromImage(file: File): Promise<string> {
  try {
    const worker = await createWorker()
    
    const imageData = await new Promise<string>((resolve) => {
      const reader = new FileReader()
      reader.onload = () => resolve(reader.result as string)
      reader.readAsDataURL(file)
    })
    
    await worker.load()
    await worker.loadLanguage('eng')
    await worker.initialize('eng')
    
    const { data } = await worker.recognize(imageData)
    await worker.terminate()
    
    return data.text
  } catch (error) {
    console.error('Error extracting text from image:', error)
    return 'Error extracting text from image'
  }
}

function createPrompt(
  topic: string,
  fileContent: string,
  tone: TweetTone,
  length: TweetLength,
  threadMode: boolean,
  threadCount: number
): string {
  let prompt = `Generate ${threadMode ? `a thread of ${threadCount} tweets` : 'a tweet'} about "${topic}"`
  
  if (fileContent) {
    prompt += ` based on the following content:\n\n${fileContent}\n\n`
  }
  
  prompt += `\nThe tweet${threadMode ? 's' : ''} should be in a ${tone.toLowerCase()} tone and ${length.toLowerCase()} length.`
  
  if (threadMode) {
    prompt += `\nEnsure the thread has a logical flow and each tweet connects well with the previous one.`
  }
  
  prompt += `\nInclude relevant hashtags and emojis where appropriate.`
  prompt += `\nFormat the response as a JSON array with each tweet having the following properties: content, hashtags, tone, length, and if it's a thread, include threadIndex and threadTotal.`
  
  return prompt
}

async function callOpenAIAPI(prompt: string): Promise<Tweet[]> {
  try {
    const accessToken = import.meta.env.VITE_PROXY_SERVER_ACCESS_TOKEN
    
    const response = await fetch('https://proxy.chatandbuild.com/proxy', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${accessToken}`
      },
      body: JSON.stringify({
        url: 'https://api.openai.com/v1/chat/completions',
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${import.meta.env.VITE_OPENAI_API_KEY}`
        },
        body: {
          model: "gpt-4",
          messages: [
            {
              role: "system",
              content: "You are a professional tweet writer who creates engaging, relevant content. Your responses should be formatted as JSON arrays."
            },
            {
              role: "user",
              content: prompt
            }
          ],
          temperature: 0.7
        }
      })
    })
    
    if (!response.ok) {
      throw new Error(`API request failed with status ${response.status}`)
    }
    
    const data = await response.json()
    
    // Parse the response to extract the tweets
    const content = data.choices[0].message.content
    
    // Extract JSON from the response (in case it contains markdown or other text)
    const jsonMatch = content.match(/```json\n([\s\S]*)\n```/) || content.match(/\[([\s\S]*)\]/)
    const jsonString = jsonMatch ? jsonMatch[1] : content
    
    // Parse the JSON
    try {
      const tweets = JSON.parse(jsonString.includes('[') ? jsonString : `[${jsonString}]`)
      return tweets
    } catch (e) {
      console.error('Error parsing JSON response:', e)
      
      // Fallback: create a single tweet from the raw response
      return [{
        content: content.substring(0, 280),
        hashtags: ['#AI', '#TweetGenerator'],
        tone: 'Professional',
        length: 'Medium'
      }]
    }
  } catch (error) {
    console.error('Error calling OpenAI API:', error)
    throw error
  }
}
